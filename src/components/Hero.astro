---
import { FIGHTERS, MATCHUPS } from "@/consts/fighters";
import BoxerCard from "./BoxerCard.astro";

const orderedFighters = [];
MATCHUPS.forEach(matchup => {
  orderedFighters.push(FIGHTERS.find(f => f.id === matchup.fighter1));
  orderedFighters.push(FIGHTERS.find(f => f.id === matchup.fighter2));
});
---

<section class="relative flex min-h-screen w-full">
  <div
    class="bg-[url('/images/hero.png')] bg-cover bg-center w-full mask-fade-bottom absolute inset-0"
  >
  </div>

  <div class="relative flex flex-col items-center p-8 w-full text-center">
    <div
      id="landing"
      class="absolute inset-0 flex flex-col items-center w-full py-32"
    >
      <h3
        class="font-light text-theme-seashell leading-[100%] mt-4 animate-fade-in animate-delay-300"
      >
        <strong>26</strong> DE <br /><strong>JULIO</strong>
      </h3>
      <figure class="relative mt-8 animate-fade-in">
        <img
          class="w-64 h-auto z-20 relative"
          src="/images/logo.png"
          fetchpriority="high"
          alt="La Velada del AÃ±o V"
          decoding="async"
        />
        <div class="absolute bg-pink-400/80 blur-2xl z-0 size-64 top-0"></div>
      </figure>
      <h3
        class="font-light text-theme-seashell leading-[100%] mt-4 animate-fade-in animate-delay-500"
      >
        ESTADIO<br />LA CARTUJA,<br /><strong>SEVILLA</strong>
      </h3>
      <h3
        class="font-light text-theme-raisin-black leading-[100%] mt-4 animate-fade-in animate-delay-700"
      >
        <a
          href="https://twitch.tv/ibai"
          rel="noopener noreferrer"
          target="_blank"
          class="inline-block transition hover:scale-125"
        >
          TWITCH.TV<br /><strong>IBAI</strong>
        </a>
      </h3>

      <div class="mt-12 relative">
        <div id="mystery-figure" class="mystery-figure">?</div>
      </div>
    </div>

    <div
      id="fighter-container"
      class="pointer-events-none absolute inset-0 flex flex-col items-center"
    >
      <div
        class="relative top-24 mx-auto h-20 flex w-full items-center justify-center"
      >
        {
          FIGHTERS.map(({ id, name }) => (
            <img
              data-id={`hero-text-${id}`}
              src={`/images/fighters/text/${id}.png`}
              alt={name}
              decoding="async"
              class="w-auto h-full absolute hidden mask-fade-text"
              fetchpriority="low"
            />
          ))
        }
      </div>

      <div
        class="mask-fade-bottom relative bottom-0 mx-auto h-[80vh] flex w-full items-center justify-center"
      >
        {
          FIGHTERS.map(({ id, name }) => (
            <img
              transition:name={`image-${id}`}
              data-id={`hero-image-${id}`}
              src={`/images/fighters/big/${id}.png`}
              alt={name}
              decoding="async"
              class="w-auto h-full absolute hidden"
              fetchpriority="low"
            />
          ))
        }
      </div>
    </div>

    <div class="carousel-container">
      <div id="carousel" class="carousel">
        {
          FIGHTERS.map(({ id, name }) => (
            <a 
              class="fighter-card" 
              data-id={id}
              href={`/luchador/${id}`}
            >
              <div class="card-inner">
                <img 
                  src={`/images/fighters/cards/${id}.png`} 
                  alt={name} 
                  class="fighter-img"
                />
                <div class="card-overlay">
                  <h3 class="fighter-name">{name}</h3>
                </div>
              </div>
            </a>
          ))
        }
      </div>
    </div>
  </div>
</section>

<style>
  .mask-fade-text {
    mask-image: linear-gradient(
      to bottom,
      transparent 5%,
      black 6%,
      black 95%,
      transparent 100%
    );
  }

  .mask-fade-bottom {
    mask-image: linear-gradient(to bottom, rgba(0,0,0,1) 70%, rgba(0,0,0,0) 100%);
  }

  .mystery-figure {
    height: 8rem;
    width: 8rem;
    margin: 0 auto;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 6rem;
    font-weight: 700;
    color: var(--theme-seashell);
    filter: drop-shadow(0 0 20px rgba(255, 105, 180, 0.5));
    background-color: rgba(0, 0, 0, 0.3);
    border-radius: 50%;
    z-index: 5;
    transition: all 0.3s ease;
    cursor: pointer;
  }

  .mystery-figure:hover {
    background-color: rgba(255, 105, 180, 0.3);
    transform: scale(1.05);
  }

  .carousel-container {
    position: absolute;
    bottom: 6rem;
    left: 50%;
    transform: translateX(-50%);
    width: 100%;
    max-width: 90rem;
    height: 12rem;
    perspective: 1200px;
    z-index: 10;
    display: flex;
    justify-content: center;
    overflow: hidden;
  }

  .carousel {
    position: relative;
    width: 100%;
    height: 100%;
    transform-style: preserve-3d;
    display: flex;
    justify-content: center;
    align-items: center;
    transition: transform 0.7s ease;
  }

  .fighter-card {
    position: absolute;
    width: 7rem;
    height: 10rem;
    transform-origin: center;
    transition: all 0.3s ease;
    cursor: pointer;
    z-index: 1;
    text-decoration: none;
    backface-visibility: hidden;
  }

  .fighter-card:hover {
    z-index: 100 !important;
  }

  .card-inner {
    width: 100%;
    height: 100%;
    position: relative;
    border-radius: 0.5rem;
    overflow: hidden;
    box-shadow: 0 10px 20px rgba(0,0,0,0.3);
    border: 2px solid rgba(255, 255, 255, 0.2);
    background: linear-gradient(145deg, rgba(255,105,180,0.4) 0%, rgba(138,43,226,0.4) 100%);
    transition: all 0.3s ease;
    transform-style: preserve-3d;
  }

  .fighter-card:hover .card-inner {
    border-color: rgba(255, 105, 180, 0.8);
    box-shadow: 0 15px 30px rgba(255,105,180,0.4);
  }

  .fighter-img {
    aspect-ratio: 900/1200;
    height: 100%;
    width: 100%;
    object-fit: cover;
    object-position: top;
    transition: transform 0.3s ease-in-out;
  }

  .card-overlay {
    position: absolute;
    inset: 0;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: flex-end;
    background: linear-gradient(to top, rgba(157, 23, 77, 0.9), transparent);
    opacity: 0;
    transition: opacity 0.3s ease;
    padding: 0.5rem;
  }

  .fighter-card:hover .card-overlay {
    opacity: 1;
  }

  .fighter-name {
    color: var(--theme-tickle-me-pink, #FFB6C1);
    font-size: 0.75rem;
    font-weight: 700;
    text-shadow: 0 0 10px rgba(0,0,0,0.8);
    text-align: center;
  }

  .fighter-card:nth-child(odd) {
    transform-origin: right center;
  }

  .fighter-card:nth-child(even) {
    transform-origin: left center;
  }
</style>

<script>
  document.addEventListener("astro:page-load", () => {
    const $landing = document.querySelector("#landing");
    const $mysteryFigure = document.querySelector("#mystery-figure");
    const $carousel = document.querySelector("#carousel");
    const $carouselContainer = document.querySelector(".carousel-container");
    const fighterCards = document.querySelectorAll(".fighter-card");

    let currentFighterId = null;
    let timeoutId = null;
    let rotationAngle = 0;
    let rotationInterval = null;
    let activeCardIndex = 0;
    let isPaused = false;
    let hoveredCardId = null;

    const totalCards = fighterCards.length;
    const cardAngle = 360 / totalCards;
    const radius = 300;
    const rotationTime = 3500;

    function positionAllCards() {
      fighterCards.forEach((card, index) => {
        const angle = (index * cardAngle + rotationAngle) % 360;
        const angleRad = angle * (Math.PI / 180);
        const x = Math.sin(angleRad) * radius;
        const z = Math.cos(angleRad) * radius - radius;
        const frontness = Math.cos(angleRad);
        const opacity = frontness > 0 ? 0.3 + frontness * 0.7 : 0;
        const scale = 0.7 + frontness * 0.3;

        card.style.transform = `translateX(${x}px) translateZ(${z}px) rotateY(${-angle}deg) scale(${scale})`;
        card.style.opacity = opacity;

        if (Math.abs(angle - 180) < cardAngle / 2) {
          activeCardIndex = index;
          const id = card.getAttribute("data-id");
          if (id && !isPaused && hoveredCardId === null) {
            showFighter(id);
          }
        }
        card.style.pointerEvents = "auto";
      });
    }

    positionAllCards();

    function rotateOneStep() {
      if (isPaused) return;
      rotationAngle = (rotationAngle + cardAngle) % 360;
      $carousel.style.transition = "transform 0.7s ease";
      positionAllCards();
    }

    rotationInterval = setInterval(rotateOneStep, rotationTime);

    function resetView() {
      $landing.classList.remove("hidden");
      document
        .querySelectorAll('[data-id^="hero-text-"], [data-id^="hero-image-"]')
        .forEach((el) => {
          el.classList.add("hidden");
        });
      currentFighterId = null;
    }

    function showFighter(id) {
      if (currentFighterId === id) return;

      document
        .querySelectorAll('[data-id^="hero-text-"], [data-id^="hero-image-"]')
        .forEach((el) => {
          el.classList.add("hidden");
        });

      $landing.classList.add("hidden");

      const textElement = document.querySelector(`[data-id="hero-text-${id}"]`);
      const imageElement = document.querySelector(`[data-id="hero-image-${id}"]`);
      if (textElement) textElement.classList.remove("hidden");
      if (imageElement) imageElement.classList.remove("hidden");

      currentFighterId = id;
    }

    $carouselContainer.addEventListener("mouseenter", () => {
      isPaused = true;
      if (timeoutId) clearTimeout(timeoutId);
    });

    $carouselContainer.addEventListener("mouseleave", () => {
      isPaused = false;
      timeoutId = setTimeout(() => {
        if (hoveredCardId === null) {
          resetView();
        }
      }, 500);
    });

    fighterCards.forEach((card) => {
      card.addEventListener("mouseenter", (e) => {
        e.preventDefault();
        const id = card.getAttribute("data-id");
        if (id) {
          hoveredCardId = id;
          showFighter(id);
        }
      });

      card.addEventListener("mouseleave", () => {
        hoveredCardId = null;
        if (!isPaused) {
          positionAllCards();
        }
      });

      card.addEventListener("click", (e) => {
        const id = card.getAttribute("data-id");
        if (id) {
          window.location.href = `/luchador/${id}`;
        }
      });
    });

    $mysteryFigure.addEventListener("click", resetView);

    document.addEventListener("keydown", (e) => {
      if (e.key === "ArrowLeft") {
        rotationAngle = (rotationAngle - cardAngle + 360) % 360;
        positionAllCards();
      } else if (e.key === "ArrowRight") {
        rotationAngle = (rotationAngle + cardAngle) % 360;
        positionAllCards();
      }
    });
  });
</script>